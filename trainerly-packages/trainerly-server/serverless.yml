service: matan-trainings-server

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1  # Europe (Frankfurt) - Closest to Israel
  stage: ${opt:stage, 'dev'}
  
  # Environment variables
  environment:
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE_PREFIX: ${self:service}-${self:provider.stage}
    # Local development uses DynamoDB Local
    DYNAMODB_ENDPOINT: ${self:custom.dynamodb.endpoint.${self:provider.stage}, ''}
    IS_LOCAL: ${self:custom.isLocal.${self:provider.stage}, 'false'}
    
  # IAM permissions for DynamoDB
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}-*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - 'node_modules/@aws-sdk/**'
    - 'node_modules/zod/**'
    - 'node_modules/uuid/**'
    - 'node_modules/bcryptjs/**'
    - 'node_modules/jsonwebtoken/**'

custom:
  # Environment-specific configurations
  dynamodb:
    endpoint:
      local: 'http://localhost:8000'
  isLocal:
    local: 'true'
  
  # Serverless offline configuration
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002

functions:
  # Health check
  health:
    handler: src/handlers/health.handler
    events:
      - http:
          path: /health
          method: get
          cors: true

  # Nickname validation
  checkNickname:
    handler: src/handlers/coaches.checkNickname
    events:
      - http:
          path: /nicknames/check
          method: get
          cors: true

  # Coach authentication
  createCoach:
    handler: src/handlers/coaches.createCoach
    events:
      - http:
          path: /coaches
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  loginCoach:
    handler: src/handlers/coaches.loginCoach
    events:
      - http:
          path: /auth/coach/login
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false

  getCoach:
    handler: src/handlers/coaches.getCoach
    events:
      - http:
          path: /coaches/{coachId}
          method: get
          cors: true

  updateCoach:
    handler: src/handlers/coaches.updateCoach
    events:
      - http:
          path: /coaches/{coachId}
          method: put
          cors: true

  # Trainer management
  createTrainer:
    handler: src/handlers/trainers.createTrainer
    events:
      - http:
          path: /coaches/{coachId}/trainers
          method: post
          cors: true

  listTrainers:
    handler: src/handlers/trainers.listTrainers
    events:
      - http:
          path: /coaches/{coachId}/trainers
          method: get
          cors: true

  getTrainer:
    handler: src/handlers/trainers.getTrainer
    events:
      - http:
          path: /coaches/{coachId}/trainers/{trainerId}
          method: get
          cors: true

  identifyTrainer:
    handler: src/handlers/trainers.identifyTrainer
    events:
      - http:
          path: /auth/trainer/identify
          method: post
          cors: true

  # Exercise management
  createExercise:
    handler: src/handlers/exercises.createExercise
    events:
      - http:
          path: /coaches/{coachId}/exercises
          method: post
          cors: true

  listExercises:
    handler: src/handlers/exercises.listExercises
    events:
      - http:
          path: /coaches/{coachId}/exercises
          method: get
          cors: true

  # Training plan management
  createPlan:
    handler: src/handlers/plans.createPlan
    events:
      - http:
          path: /coaches/{coachId}/plans
          method: post
          cors: true

  listPlans:
    handler: src/handlers/plans.listPlans
    events:
      - http:
          path: /coaches/{coachId}/plans
          method: get
          cors: true

  assignPlan:
    handler: src/handlers/plans.assignPlan
    events:
      - http:
          path: /coaches/{coachId}/trainers/{trainerId}/plans/{planId}/assign
          method: post
          cors: true

  getTrainerPlans:
    handler: src/handlers/plans.getTrainerPlans
    events:
      - http:
          path: /trainers/{trainerId}/plans
          method: get
          cors: true


  # Admin functions (WARNING: Should be protected in production!)
  clearDatabase:
    handler: src/handlers/admin.clearDatabase
    events:
      - http:
          path: /admin/clear-database
          method: delete
          cors: true

  # Admin exercise bank
  getAdminExercises:
    handler: src/handlers/admin.getAdminExercises
    events:
      - http:
          path: /admin/exercises
          method: get
          cors: true

  # Admin training plan bank
  getAdminTrainingPlans:
    handler: src/handlers/admin.getAdminTrainingPlans
    events:
      - http:
          path: /admin/training-plans
          method: get
          cors: true

  # Copy admin exercise to coach
  copyAdminExercise:
    handler: src/handlers/coaches.copyAdminExercise
    events:
      - http:
          path: /coaches/{coachId}/exercises/copy-admin/{adminExerciseId}
          method: post
          cors: true

  # Copy admin training plan to coach
  copyAdminTrainingPlan:
    handler: src/handlers/coaches.copyAdminTrainingPlan
    events:
      - http:
          path: /coaches/{coachId}/training-plans/copy-admin/{adminPlanId}
          method: post
          cors: true

  # Create custom training plan for trainee
  createCustomTrainingPlan:
    handler: src/handlers/trainers.createCustomTrainingPlan
    events:
      - http:
          path: /coaches/{coachId}/trainers/{trainerId}/custom-plan
          method: post
          cors: true

  # Get custom training plans for trainee
  getTraineeCustomPlans:
    handler: src/handlers/trainers.getTraineeCustomPlans
    events:
      - http:
          path: /coaches/{coachId}/trainers/{trainerId}/custom-plans
          method: get
          cors: true

  # Make custom plan generic
  makeCustomPlanGeneric:
    handler: src/handlers/plans.makeCustomPlanGeneric
    events:
      - http:
          path: /coaches/{coachId}/training-plans/{planId}/make-generic
          method: put
          cors: true

  getTrainingPlan:
    handler: src/handlers/plans.getTrainingPlan
    events:
      - http:
          path: /coaches/{coachId}/training-plans/{planId}
          method: get
          cors: true

  updateTrainingPlan:
    handler: src/handlers/plans.updateTrainingPlan
    events:
      - http:
          path: /coaches/{coachId}/training-plans/{planId}
          method: put
          cors: true

  deleteTrainingPlan:
    handler: src/handlers/plans.deleteTrainingPlan
    events:
      - http:
          path: /coaches/{coachId}/training-plans/{planId}
          method: delete
          cors: true

# DynamoDB tables
resources:
  Resources:
    # Coaches Table
    CoachesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-coaches
        AttributeDefinitions:
          - AttributeName: coachId
            AttributeType: S
        KeySchema:
          - AttributeName: coachId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Trainers Table
    TrainersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-trainers
        AttributeDefinitions:
          - AttributeName: trainerId
            AttributeType: S
        KeySchema:
          - AttributeName: trainerId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Exercises Table
    ExercisesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-exercises
        AttributeDefinitions:
          - AttributeName: exerciseId
            AttributeType: S
        KeySchema:
          - AttributeName: exerciseId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # Training Plans Table (new structure)
    PlansTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-plans
        AttributeDefinitions:
          - AttributeName: planId
            AttributeType: S
        KeySchema:
          - AttributeName: planId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST




# Custom domain (optional)
# custom:
#   domain: api.matan-trainings.com
