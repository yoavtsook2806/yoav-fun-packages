# Yoav Fun Packages - Cursor Rules

## Project Structure
This is a monorepo containing multiple fun web applications and packages.

## CRITICAL PACKAGE PROTECTION
- **NEVER TOUCH `matan-training` PACKAGE** - This package must remain exactly as it is on the main branch
- **DO NOT MODIFY ANY FILES** in `/packages/matan-training/` directory
- **DO NOT UPDATE REFERENCES** to matan-training in any configuration files
- **DO NOT CHANGE** matan-training's package.json, dependencies, or any code
- matan-training is the original app and must stay completely untouched

## Package Organization
- **Original Package**: `matan-training` (untouchable - keep as-is from main branch)
- **Trainerly Packages**: All new professional training platform packages
  - `trainerly-coach-app`: Coach dashboard and management
  - `trainerly-trainee-app`: Trainee mobile/web app with authentication
  - `trainerly-server`: Backend API server

## Package Management
- **Use yarn workspaces** for all package management operations
- **Never use npm directly** - always use yarn workspace commands
- To run dev server: `yarn workspace [package-name] dev`
- To install dependencies: `yarn workspace [package-name] add [dependency]`
- To build: `yarn workspace [package-name] build`

## Development Commands
### Original App (DO NOT CHANGE)
- Start matan-training dev server: `yarn workspace matan-training dev`
- Build matan-training: `yarn workspace matan-training build`

### Trainerly Platform
- Start trainerly-coach-app: `yarn workspace trainerly-coach-app dev`
- Start trainerly-trainee-app: `yarn workspace trainerly-trainee-app dev`
- Start trainerly-server: `yarn workspace trainerly-server dev`
- Install root dependencies: `yarn install`

## CRITICAL USER-ONLY OPERATIONS
- **NEVER use `git push`** - only commit changes with `git commit`
- **NEVER clear/delete the database** - only the user can remove database data
- The user will handle all pushing to remote repositories
- The user will handle all database clearing/deletion operations
- Always use `git add` and `git commit` for saving changes
- Never run `git push` under any circumstances
- Never run database clear commands like `/admin/clear-database` or similar deletion operations

## Server Deployment
- **ALWAYS deploy server changes** after modifying trainerly-server code
- **MANDATORY**: After ANY changes to `/trainerly-packages/trainerly-server/src/` files, run:
  ```bash
  cd /Users/yoavt/publicDev/yoav-fun-packages && yarn workspace trainerly-server deploy:dev
  ```
- **Deploy immediately** after committing server-side changes
- **Server endpoints must be deployed** before client can use them
- **This includes**: API handlers, database schema changes, types, constants, services
- **No exceptions**: Even small changes require deployment for client functionality

## Bug Fix Protocol
When the user writes "bug:" (without specifying package name) follow this EXACT workflow:
1. **Find the right package** - Analyze the bug description and codebase to identify which package(s) contain the issue
2. **Write a failing test** that reproduces the bug
3. **Verify the test fails** by running it
4. **Fix the bug** with minimal changes
5. **Run all tests** in the package to ensure everything passes (including the new test)
6. **If the test you wrote is not good** (e.g., doesn't properly test the bug, has wrong assertions, etc.):
   - You can modify/rewrite the test
   - ALWAYS ensure the test fails BEFORE making the bug fix
   - ALWAYS ensure the test passes AFTER making the bug fix
7. **If other tests fail** that used to pass:
   - Ask the user if we should change the test or try another fix
   - NEVER change previously passing tests without user approval

## New Product Development Protocol
When the user writes "new product:" follow this EXACT TDD workflow:
1. **Find the right package** - Analyze the product description and codebase to identify which package(s) need the implementation
2. **Write failing tests** that define the expected behavior of the new product:
   - Change relevant existing tests if they need updates for the new product
   - Create new test files if no relevant tests exist
   - Tests should comprehensively cover the new product's functionality
   - ALWAYS ensure the tests FAIL initially (red phase of TDD)
3. **Verify the tests fail** by running them - this confirms we're testing the right thing
4. **Implement the new product** with minimal code to make tests pass:
   - Follow TDD principles: write only enough code to make tests pass
   - Implement incrementally if the product is complex
   - Focus on making tests green, not on perfect code initially
5. **Run all tests** to ensure:
   - The new product tests pass (green phase of TDD)
   - All existing tests in the package still pass
   - No regressions were introduced
6. **If existing tests fail** that used to pass:
   - Analyze if it's a legitimate bug you introduced
   - Determine if it's something you missed and should have changed
   - If you're not sure, STOP and ask the user for guidance
   - NEVER change previously passing tests without user approval unless it's clearly correct
7. **Refactor if needed** (refactor phase of TDD):
   - Clean up code while keeping tests green
   - Optimize implementation
   - Ensure code quality and maintainability

## Code Style
- Use TypeScript for all new code
- Follow React best practices
- Maintain responsive design for mobile and desktop
- Use modern CSS features and flexbox/grid layouts
